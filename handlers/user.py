from aiogram import Router
from aiogram.filters import Command, Text
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from database import sql_module
from keyboards.reply import main_kb
from keyboards.inline import settings_keyboard, classes_kb, schedules_date, info_kb
from misc.tools import get_date_tuple, format_schedule

router = Router()


@router.message(Text(text='–û—Ç–º–µ–Ω–∞'))
async def command_cancel_handler(message: Message, state: FSMContext) -> None:
    await message.delete()
    await state.clear()

    await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=main_kb())


@router.message(Command(commands=['start']))
async def command_start_handler(message: Message, state: FSMContext) -> None:
    await message.delete()
    await state.clear()

    if await sql_module.get_user_info(message.from_user.id):
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.full_name} üëã\n',
                             reply_markup=main_kb())

    else:
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.full_name} üëã\n')
        await message.answer('–ö–∞–∂–µ—Ç—Å—è, –≤—ã –∑–¥–µ—Å—å –≤–ø–µ—Ä–≤—ã–µ. –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:',
                             reply_markup=classes_kb())


@router.message(Command(commands=['id']))
async def command_id_handler(message: Message) -> None:
    await message.delete()
    await message.answer(f'ü™™ ID: {message.from_user.id}\n',
                         reply_markup=main_kb())


@router.message(Text(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'))
async def info_handler(message: Message) -> None:
    await message.answer('–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –ú–ë–û–£ –°–û–® ‚Ññ72', reply_markup=info_kb())


@router.message(Text(text='–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'))
async def schedule_handler(message: Message) -> None:
    await message.reply('–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å?', reply_markup=schedules_date())


@router.callback_query(Text(startswith='get_schedule'))
async def send_schedule(callback: CallbackQuery) -> None:
    await callback.answer()

    user_info = await sql_module.get_user_info(callback.from_user.id)
    if user_info:

        data = callback.data.split(':')[-1]

        date = get_date_tuple(callback.message.date, 0 if data == '0' else 24)
        schedule = await sql_module.get_schedule(date[0], class_=user_info['class'])
        schedule = format_schedule(schedule)

        if schedule:
            text = f'üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ!\n' \
                   f'üìÜ {date[0].strftime("%d.%m.%Y")}, {date[1]}, {user_info["class"]}'
            await callback.message.answer(text)
            await callback.message.answer(schedule, reply_markup=main_kb())
        else:
            await callback.message.answer(f'üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date[0].strftime("%d.%m.%Y")} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!',
                                          reply_markup=main_kb())
    else:
        await callback.message.answer('–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å - /start')


@router.message(Text(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏'))
async def settings_handler(message: Message) -> None:
    user_info = await sql_module.get_user_info(message.from_user.id)
    text = f'üë§ –ò–º—è: {message.from_user.full_name}\n' \
           f'üë• –ö–ª–∞—Å—Å: {user_info["class"]}\n' \
           f'üì¨ –†–∞—Å—Å—ã–ª–∫–∞: {"–≤–∫–ª" if user_info["mailing"] else "–≤—ã–∫–ª"}\n'

    await message.answer(text=text, reply_markup=settings_keyboard())


@router.callback_query(Text(startswith='class_changing'))
async def start_class_changing(callback: CallbackQuery) -> None:
    data = callback.data.split(':')
    await callback.answer()

    if not data[-1]:
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å.', reply_markup=classes_kb())
    elif data[-2] != 'letter':
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É.', reply_markup=classes_kb(data[-1]))
    else:
        if await sql_module.get_user_info(callback.from_user.id):
            func = sql_module.update_user
        else:
            func = sql_module.add_user

        await func(callback.from_user.id, class_=data[-1])
        await callback.message.answer('–ì–æ—Ç–æ–≤–æ!', reply_markup=main_kb())


@router.callback_query(Text(text="change_mailing"))
async def change_mailing_handler(callback: CallbackQuery):
    await sql_module.update_user(callback.from_user.id, mailing=True)
    await callback.message.answer('–ì–æ—Ç–æ–≤–æ!', reply_markup=main_kb())
    await callback.answer()
